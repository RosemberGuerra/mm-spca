stat_summary(fun = mean, geom = "line", size = .5) +
stat_summary(fun = mean, geom = "point", size = 1.5) +
facet_grid(n ~ p, scales = "free_x") +
scale_color_grey(start = 0.2, end = 0.8) +  # Use grayscale for colors
scale_shape_manual(values = c(16, 17, 15)) +  # Assign distinct shapes for penalties
labs(
# title = 'Trade-off curve of mean variance explained vs. alpha with dispersion',
x = 'Number of features',
y = 'Mean Proportion of Variance Explained'
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# save plot as pdf
ggsave("../../Sparse_operators/Figures/tradeOff-var-car.pdf",
width = 10, height = 6, units = "in")
ggplot(results, aes(x = card, y = pev_adj, color = penalty, shape = penalty)) +
# geom_hline(yintercept = 100, color = "red", linetype = "dashed") +  # Red horizontal line
stat_summary(fun = mean, geom = "line", size = .5) +
stat_summary(fun = mean, geom = "point", size = 1.5) +
facet_grid(n ~ p, scales = "free_x") +
scale_color_grey(start = 0.2, end = 0.8) +  # Use grayscale for colors
scale_shape_manual(values = c(16, 17, 15)) +  # Assign distinct shapes for penalties
labs(
# title = 'Trade-off curve of mean variance explained vs. alpha with dispersion',
x = 'Number of features',
y = 'Mean Proportion of Variance Explained'
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
ggplot(results, aes(x = card, y = pev_adj, color = penalty, shape = penalty)) +
# geom_hline(yintercept = 100, color = "red", linetype = "dashed") +  # Red horizontal line
stat_summary(fun = mean, geom = "line", size = .5) +
stat_summary(fun = mean, geom = "point", size = 1.5) +
facet_grid(n ~ p, scales = "free_x") +
scale_color_grey(start = 0.2, end = 0.8) +  # Use grayscale for colors
scale_shape_manual(values = c(16, 17, 15)) +  # Assign distinct shapes for penalties
labs(
# title = 'Trade-off curve of mean variance explained vs. alpha with dispersion',
x = 'Number of features',
y = 'Mean Proportion of Variance Explained'
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# save plot as pdf
ggsave("../../Sparse_operators/Figures/tradeOff-var_adj-car.pdf",
width = 10, height = 6, units = "in")
ggplot(results, aes(x = card, y = spca.iter, color = penalty, shape = penalty)) +
# geom_hline(yintercept = 100, color = "red", linetype = "dashed") +  # Red horizontal line
stat_summary(fun = mean, geom = "line", size = .5) +
stat_summary(fun = mean, geom = "point", size = 1) +
facet_grid(n ~ p, scales = "free_x") +
scale_color_grey(start = 0.2, end = 0.8) +  # Use grayscale for colors
scale_shape_manual(values = c(16, 17, 15)) +  # Assign distinct shapes for penalties
labs(
# title = 'Trade-off curve of mean variance explained vs. alpha with dispersion',
x = 'Number of features',
y = 'Mean Proportion of Variance Explained'
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
restult_filter = results %>% filter(card != c(20,100,200))
restults_filter = results %>% filter(card != c(20,100,200))
ggplot(results_filter, aes(x = card, y = spca.iter, color = penalty, shape = penalty)) +
# geom_hline(yintercept = 100, color = "red", linetype = "dashed") +  # Red horizontal line
stat_summary(fun = mean, geom = "line", size = .5) +
stat_summary(fun = mean, geom = "point", size = 1.5) +
facet_grid(n ~ p, scales = "free_x") +
scale_color_grey(start = 0.2, end = 0.8) +  # Use grayscale for colors
scale_shape_manual(values = c(16, 17, 15)) +  # Assign distinct shapes for penalties
labs(
# title = 'Trade-off curve of mean variance explained vs. alpha with dispersion',
x = 'Number of features',
y = 'Mean Proportion of Variance Explained'
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
results_filter = results %>% filter(card != c(20,100,200))
ggplot(results_filter, aes(x = card, y = spca.iter, color = penalty, shape = penalty)) +
# geom_hline(yintercept = 100, color = "red", linetype = "dashed") +  # Red horizontal line
stat_summary(fun = mean, geom = "line", size = .5) +
stat_summary(fun = mean, geom = "point", size = 1.5) +
facet_grid(n ~ p, scales = "free_x") +
scale_color_grey(start = 0.2, end = 0.8) +  # Use grayscale for colors
scale_shape_manual(values = c(16, 17, 15)) +  # Assign distinct shapes for penalties
labs(
# title = 'Trade-off curve of mean variance explained vs. alpha with dispersion',
x = 'Number of features',
y = 'Mean Proportion of Variance Explained'
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
ggplot(results_filter, aes(x = card, y = spca.iter, color = penalty, shape = penalty)) +
# geom_hline(yintercept = 100, color = "red", linetype = "dashed") +  # Red horizontal line
stat_summary(fun = mean, geom = "line", size = .5) +
stat_summary(fun = mean, geom = "point", size = 1.5) +
facet_grid(n ~ p, scales = "free_x") +
scale_color_grey(start = 0.2, end = 0.8) +  # Use grayscale for colors
scale_shape_manual(values = c(16, 17, 15)) +  # Assign distinct shapes for penalties
labs(
# title = 'Trade-off curve of mean variance explained vs. alpha with dispersion',
x = 'Number of features',
y = 'Time in seconds'
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
ggplot(results_filter, aes(x = card, y = spca.iter, color = penalty, shape = penalty)) +
# geom_hline(yintercept = 100, color = "red", linetype = "dashed") +  # Red horizontal line
stat_summary(fun = mean, geom = "line", size = .5) +
stat_summary(fun = mean, geom = "point", size = 1.5) +
facet_grid(n ~ p, scales = "free_x") +
scale_color_grey(start = 0.2, end = 0.8) +  # Use grayscale for colors
scale_shape_manual(values = c(16, 17, 15)) +  # Assign distinct shapes for penalties
labs(
# title = 'Trade-off curve of mean variance explained vs. alpha with dispersion',
x = 'Number of features',
y = 'Average Number of Iterations'
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# save plot as pdf
ggsave("../../Sparse_operators/Figures/tradeOff-iter-car.pdf",
width = 10, height = 6, units = "in")
results_filter_time = results %>% filter(spca.time < 1 & card != c(20,100,200)
)
results_filter_time = results %>% filter(spca.time < 1 & card != c(20,100,200))
ggplot(results_filter_time, aes(x = card, y = spca.time, color = penalty, shape = penalty)) +
# geom_hline(yintercept = 100, color = "red", linetype = "dashed") +  # Red horizontal line
stat_summary(fun = mean, geom = "line", size = .5) +
stat_summary(fun = mean, geom = "point", size = 1.5) +
facet_grid(n ~ p, scales = "free_x") +
scale_color_grey(start = 0.2, end = 0.8) +  # Use grayscale for colors
scale_shape_manual(values = c(16, 17, 15)) +  # Assign distinct shapes for penalties
labs(
# title = 'Trade-off curve of mean variance explained vs. alpha with dispersion',
x = 'Number of features',
y = 'Average Number of Iterations'
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
ggplot(results_filter_time, aes(x = card, y = spca.time, color = penalty, shape = penalty)) +
# geom_hline(yintercept = 100, color = "red", linetype = "dashed") +  # Red horizontal line
stat_summary(fun = mean, geom = "line", size = .5) +
stat_summary(fun = mean, geom = "point", size = 1.5) +
facet_grid(n ~ p, scales = "free_x") +
scale_color_grey(start = 0.2, end = 0.8) +  # Use grayscale for colors
scale_shape_manual(values = c(16, 17, 15)) +  # Assign distinct shapes for penalties
labs(
# title = 'Trade-off curve of mean variance explained vs. alpha with dispersion',
x = 'Number of features',
y = 'Average Time (sec)'
) +
theme_minimal() +
theme(
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# save plot as pdf
ggsave("../../Sparse_operators/Figures/tradeOff-time-car.pdf",
width = 10, height = 6, units = "in")
rm(list=ls())
library(dplyr)
rm(list=ls())
source("spca_estimations.R")
set.seed(123)
load('results1000.RData')
head(results)
results_filter = results %>% filter(alpha != 0 & card !=c(20,100,200))
u_card = unique(results_filter$card)
length(u_card)
results_test = data.frame()
i=1
levels(results_filter$p)
j="p = 20"
# variance of l0
group_l0 = results_filter %>%
filter(card == i & p == j & penalty == "L0") %>% select(pev_adj)
group_l0
group_l1 = results_filter %>%
filter(card== i & p == j & penalty == "L1") %>% select(pev_adj)
group_l1
group_scad
group_scad = results_filter %>%
filter(card == i & p == j & penalty == "SCAD") %>% select(pev_adj)
length(group_scad$pev)
length(group_scad)
length(group_scad[1])
length(group_scad[[1]])
length(group_l1[[1]])
(length(group_l0[[1]])
length(group_l0[[1]])
# Initialize progress bar
Npermt = 100
# permutation test
if (length(group_l0[[1]]) < 10 | length(group_l1[[1]])  < 10){
ptest = NA
} else {
ptest =permutation_test(group_l0[[1]], group_l1[[1]], n_permutations = Npermt, alternative = "greater")
results_test = rbind(results_test, data.frame(p = j, card = i, p_val = ptest$p_value, testing = "L0 vs L1"))
}
if (length(group_l0[[1]])  < 10 | length(group_scad[[1]])  < 10){
ptest = NA
} else {
ptest =permutation_test(group_l0[[1]], group_scad[[1]], n_permutations = Npermt, alternative = "greater")
results_test = rbind(results_test, data.frame(p = j, card = i, p_val = ptest$p_value, testing = "L0 vs SCAD"))
}
if (length(group_l1[[1]])  < 10| length(group_scad[[1]])  < 10){
ptest = NA
} else {
ptest =permutation_test(group_l1[[1]], group_scad[[1]], n_permutations = Npermt, alternative = "greater")
results_test = rbind(results_test, data.frame(p = j, card = i,p_val = ptest$p_value, testing= "L1 vs SCAD"))
}
View(results_test)
rm(list=ls())
source("spca_estimations.R")
set.seed(123)
load('results1000.RData')
head(results)
results_filter = results %>% filter(alpha != 0 & card !=c(20,100,200))
u_card = unique(results_filter$card)
length(u_card)
results_test = data.frame()
# Initialize progress bar
Npermt = 100
pb <- txtProgressBar(min = 0, max = length(u_card), style = 3)
counter = 0
for (i in u_card){
# Update progress bar
counter = counter + 1
setTxtProgressBar(pb, counter)
for (j in levels(results_filter$p)){
# print(j)
# variance of l0
group_l0 = results_filter %>%
filter(card == i & p == j & penalty == "L0") %>% select(pev_adj)
group_l1 = results_filter %>%
filter(card== i & p == j & penalty == "L1") %>% select(pev_adj)
group_scad = results_filter %>%
filter(card == i & p == j & penalty == "SCAD") %>% select(pev_adj)
# permutation test
if (length(group_l0[[1]]) < 10 | length(group_l1[[1]])  < 10){
ptest = NA
} else {
ptest =permutation_test(group_l0[[1]], group_l1[[1]], n_permutations = Npermt, alternative = "greater")
results_test = rbind(results_test, data.frame(p = j, card = i, p_val = ptest$p_value, testing = "L0 vs L1"))
}
if (length(group_l0[[1]])  < 10 | length(group_scad[[1]])  < 10){
ptest = NA
} else {
ptest =permutation_test(group_l0[[1]], group_scad[[1]], n_permutations = Npermt, alternative = "greater")
results_test = rbind(results_test, data.frame(p = j, card = i, p_val = ptest$p_value, testing = "L0 vs SCAD"))
}
if (length(group_l1[[1]])  < 10| length(group_scad[[1]])  < 10){
ptest = NA
} else {
ptest =permutation_test(group_l1[[1]], group_scad[[1]], n_permutations = Npermt, alternative = "greater")
results_test = rbind(results_test, data.frame(p = j, card = i,p_val = ptest$p_value, testing= "L1 vs SCAD"))
}
}
}
# Close progress bar
close(pb)
# plot the results #
library(ggplot2)
# factors #
results_test$testing = as.factor(results_test$testing)
levels(results_test$testing)
results_test$p = factor(as.factor(results_test$p), levels = c('p = 20','p = 100','p = 200'))
levels(results_test$p)
ggplot(results_test, aes(x = card, y = p_val)) +
geom_point(size = 2, alpha = 0.8) +  # Scatter plot of points
geom_hline(yintercept = 0.05, color = "red", linetype = "dashed") +  # Red horizontal line
facet_grid(testing ~ p, scales = "free_x") +  # Free x-axis range for each grid
labs(
x = 'Number of Features',
y = 'Permutation Test p-Value'  # Updated y-axis label
) +
theme_minimal()
# only show the significant results #
results_test_sig = results_test %>% filter(p_val < 0.05)
ggplot(results_test_sig, aes(x = card, y = p_val)) +
geom_point(size = 2, alpha = 0.8) +  # Scatter plot of points
geom_hline(yintercept = 0.05, color = "red", linetype = "dashed") +  # Red horizontal line
facet_grid(testing ~ p, scales = "free_x") +  # Free x-axis range for each grid
labs(
x = 'Number of Features',
y = 'Permutation Test p-Value'  # Updated y-axis label
) +
theme_minimal()
View(permutation_test)
View(permutation_test)
View(permutation_test)
rm(list=ls())
source("spca_estimations.R")
set.seed(123)
load('results1000.RData')
head(results)
results_filter = results %>% filter(alpha != 0 & card !=c(20,100,200))
u_card = unique(results_filter$card)
length(u_card)
results_test = data.frame()
# Initialize progress bar
Npermt = 100
pb <- txtProgressBar(min = 0, max = length(u_card), style = 3)
counter = 0
for (i in u_card){
# Update progress bar
counter = counter + 1
setTxtProgressBar(pb, counter)
for (j in levels(results_filter$p)){
# print(j)
# variance of l0
group_l0 = results_filter %>%
filter(card == i & p == j & penalty == "L0") %>% select(pev_adj)
group_l1 = results_filter %>%
filter(card== i & p == j & penalty == "L1") %>% select(pev_adj)
group_scad = results_filter %>%
filter(card == i & p == j & penalty == "SCAD") %>% select(pev_adj)
# permutation test
if (length(group_l0[[1]]) < 10 | length(group_l1[[1]])  < 10){
ptest = NA
} else {
ptest =permutation_test(group_l1[[1]], group_l0[[1]],
n_permutations = Npermt, alternative = "greater")
results_test = rbind(results_test, data.frame(p = j, card = i,
p_val = ptest$p_value, testing = "L1 > L0"))
}
if (length(group_l0[[1]])  < 10 | length(group_scad[[1]])  < 10){
ptest = NA
} else {
ptest =permutation_test(group_scad[[1]],group_l0[[1]],
n_permutations = Npermt, alternative = "greater")
results_test = rbind(results_test, data.frame(p = j, card = i,
p_val = ptest$p_value, testing = "SCAD > L0"))
}
if (length(group_l1[[1]])  < 10| length(group_scad[[1]])  < 10){
ptest = NA
} else {
ptest =permutation_test(group_l1[[1]], group_scad[[1]],
n_permutations = Npermt, alternative = "greater")
results_test = rbind(results_test, data.frame(p = j, card = i,
p_val = ptest$p_value, testing= "L1 > SCAD"))
}
}
}
# Close progress bar
close(pb)
# plot the results #
library(ggplot2)
# factors #
results_test$testing = as.factor(results_test$testing)
levels(results_test$testing)
results_test$p = factor(as.factor(results_test$p), levels = c('p = 20','p = 100','p = 200'))
levels(results_test$p)
ggplot(results_test, aes(x = card, y = p_val)) +
geom_point(size = 2, alpha = 0.8) +  # Scatter plot of points
geom_hline(yintercept = 0.05, color = "red", linetype = "dashed") +  # Red horizontal line
facet_grid(testing ~ p, scales = "free_x") +  # Free x-axis range for each grid
labs(
x = 'Number of Features',
y = 'Permutation Test p-Value'  # Updated y-axis label
) +
theme_minimal()
# save plot as pdf
ggsave("../../Sparse_operators/Figures/permutation_test.pdf",
width = 10, height = 6, units = "in")
# only show the significant results #
results_test_sig = results_test %>% filter(p_val < 0.05)
ggplot(results_test_sig, aes(x = card, y = p_val)) +
geom_point(size = 2, alpha = 0.8) +  # Scatter plot of points
geom_hline(yintercept = 0.05, color = "red", linetype = "dashed") +  # Red horizontal line
facet_grid(testing ~ p, scales = "free_x") +  # Free x-axis range for each grid
labs(
x = 'Number of Features',
y = 'Permutation Test p-Value'  # Updated y-axis label
) +
theme_minimal()
ggplot(results_test_sig, aes(x = card, y = p_val)) +
geom_point(size = 2, alpha = 0.8) +  # Scatter plot of points
# geom_hline(yintercept = 0.05, color = "red", linetype = "dashed") +  # Red horizontal line
facet_grid(testing ~ p, scales = "free_x") +  # Free x-axis range for each grid
labs(
x = 'Number of Features',
y = 'Permutation Test p-Value'  # Updated y-axis label
) +
theme_minimal()
# save plot as pdf
ggsave("../../Sparse_operators/Figures/permutation_test_adj.pdf",
width = 10, height = 6, units = "in")
ggplot(results_test, aes(x = card, y = p_val)) +
geom_point(aes(color = p_val > 0.05, alpha = p_val > 0.05), size = 2) +  # Conditional aesthetics
scale_color_manual(values = c("darkgray", "lightgray")) +  # Dark for ≤ 0.05, light for > 0.05
scale_alpha_manual(values = c(1, 0.5)) +  # Fully opaque for ≤ 0.05, semi-transparent for > 0.05
geom_hline(yintercept = 0.05, color = "black", linetype = "dashed") +  # Dashed line in black
facet_grid(testing ~ p, scales = "free_x") +  # Free x-axis range for each grid
labs(
x = 'Number of Features',
y = 'Permutation Test p-Value'  # Updated y-axis label
) +
theme_minimal() +
theme(
legend.position = "none"  # Remove legend for a cleaner grayscale look
)
ggplot(results_test, aes(x = card, y = p_val)) +
geom_point(aes(color = p_val > 0.05, alpha = p_val > 0.05), size = 2) +  # Conditional aesthetics
scale_color_manual(values = c("darkgray", "lightgray")) +  # Dark for ≤ 0.05, light for > 0.05
scale_alpha_manual(values = c(1, 0.5)) +  # Fully opaque for ≤ 0.05, semi-transparent for > 0.05
geom_hline(yintercept = 0.05, color = "black", linetype = "dashed") +  # Dashed line in black
facet_grid(testing ~ p, scales = "free_x") +  # Free x-axis range for each grid
labs(
x = 'Number of Features',
y = 'Permutation Test p-Value'  # Updated y-axis label
) +
theme_minimal() +
theme(
legend.position = "none"  # Remove legend for a cleaner grayscale look
)
# save plot as pdf
ggsave("../../Sparse_operators/Figures/permutation_test_adj.pdf",
width = 10, height = 6, units = "in")
ggplot(results_test, aes(x = card, y = p_val)) +
geom_point(aes(color = p_val > 0.05, alpha = p_val > 0.05), size = 2) +  # Conditional aesthetics
scale_color_manual(values = c("darkgray", "lightgray")) +  # Dark for ≤ 0.05, light for > 0.05
scale_alpha_manual(values = c(1, 0.5)) +  # Fully opaque for ≤ 0.05, semi-transparent for > 0.05
geom_hline(yintercept = 0.05, color = "black", linetype = "dashed") +  # Dashed line in black
facet_grid(testing ~ p, scales = "free_x") +  # Free x-axis range for each grid
labs(
x = 'Number of Features',
y = 'Permutation Test p-Value'  # Updated y-axis label
) +
theme_minimal() +
theme(
legend.position = "none"  # Remove legend for a cleaner grayscale look
)
# save plot as pdf
ggsave("../../Sparse_operators/Figures/permutation_test.pdf",
width = 10, height = 6, units = "in")
ggplot(results_test, aes(x = card, y = p_val)) +
geom_point(aes(color = p_val > 0.05, alpha = p_val > 0.05), size = 2) +  # Conditional aesthetics
scale_color_manual(values = c("black", "gray60")) +  # Black for ≤ 0.05, darker gray for > 0.05
scale_alpha_manual(values = c(1, 0.8)) +  # Fully opaque for ≤ 0.05, slightly transparent for > 0.05
geom_hline(yintercept = 0.05, color = "black", linetype = "dashed") +  # Dashed line in black
facet_grid(testing ~ p, scales = "free_x") +  # Free x-axis range for each grid
labs(
x = 'Number of Features',
y = 'Permutation Test p-Value'  # Updated y-axis label
) +
theme_minimal() +
theme(
legend.position = "none"  # Remove legend for a cleaner grayscale look
)
ggplot(results_test, aes(x = card, y = p_val)) +
geom_point(aes(color = p_val > 0.05, alpha = p_val > 0.05), size = 2) +  # Conditional aesthetics
scale_color_manual(values = c("black", "gray60")) +  # Black for ≤ 0.05, darker gray for > 0.05
scale_alpha_manual(values = c(1, 0.8)) +  # Fully opaque for ≤ 0.05, slightly transparent for > 0.05
geom_hline(yintercept = 0.05, color = "black", linetype = "dashed") +  # Dashed line in black
facet_grid(testing ~ p, scales = "free_x") +  # Free x-axis range for each grid
labs(
x = 'Number of Features',
y = 'Permutation Test p-Value'  # Updated y-axis label
) +
theme_minimal() +
theme(
legend.position = "none"  # Remove legend for a cleaner grayscale look
)
# save plot as pdf
ggsave("../../Sparse_operators/Figures/permutation_test.pdf",
width = 10, height = 6, units = "in")
rm(list=ls())
# source('datageneration.R')
source('spca_estimations.R')
set.seed(123)
# Set up parallel backend
num_cores <- detectCores() - 2  # Use all but one core
# Parameters
S = 1000 # Number of simulations
n = 100 # Number of observations
p = c(20,100,200) # Number of variables
penalties = c('l1','l0','scad') # Penalty functions
k = 1 # Number components
n_alpha = 10 # Number of regularization parameters
alpha = seq(from =0, to = 1.5, by=1/n_alpha) # regularization parameter
alpha
length(alpha)
rm(list = ls())
setwd("~/mm-spca/data")
